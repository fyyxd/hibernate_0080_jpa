JPA:java持久化API  是sun针对持久层开发提出的一种持久化规范，用于EJB3的实体Bean的开发
	具体实现： Hibernate   TopLink ...
	
1、核心配置文件	src/META-INF/persistence.xml
	<persistence-unit name="yan持久化单元名称" transaction-type="RESOURCE_LOCAL事务类型">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>指定JPA的具体实现
  		<properties>数据库和hibernate相关的配置
			<property name = "hibernate.connection.driver_class" value = "oracle.jdbc.OracleDriver"/>
			<property name = "hibernate.connection.url" value = "jdbc:oracle:thin:@localhost:1521:ORCL"/>
			<property name = "hibernate.connection.username" value = "scott"/>
			<property name = "hibernate.connection.password" value = "tiger"/>
	  	</properties>
	</persistence-unit>
	
2、定义数据表
	create table t_users(
		id number(18) primary key,
		username varchar2(20) not null unique,
		password varchar2(20) not null,
		birth date default sysdate,
		sex number(1) default 1
	);	
	
3、使用反向引擎组件进行反向映射
	使用注解开发，则配置信息使用@xxx的方式
	
@Entity用于声明当前类为实体类  
@Table用于声明当前类所对应的表信息
	(name = "T_USERS表名称",
	 uniqueConstraints用于声明当前表中的唯一性约束 
	 = @UniqueConstraint(columnNames = "USERNAME列名称"))
public class UserBean implements java.io.Serializable {
	private Long id;
	private String username;
	private String password;
	private Timestamp birth;
	private Boolean sex;
	@Id用于声明标志属性,可以定义在get方法上也可以定义在属性,目前普遍认为定义在属性上会破坏类的封装性
	@Column用于声明属性所对应的列定义
		(name = "ID列名称", unique = true唯一性约束, nullable = false非空约束, precision = 18针对数值型的总位宽, scale = 0小数位数)
	@GeneratedValue用于定义标志生成器名称   auto  sequence[oracle/db2]   identity[mysql/sqlserver] table
		(strategy=GenerationType.SEQUENCE)	
	public Long getId() {
		return this.id;
	}

	@Column(name = "USERNAME", unique = true, nullable = false, length = 20)
	public String getUsername() {
		return this.username;
	}

	@Column(name = "PASSWORD", nullable = false, length = 20)
	public String getPassword() {
		return this.password;
	}
	@Temporal(TemporalType.DATE)设置时间模板，定义只取年月日    Time时分秒   Timestamp
	@Column(name = "BIRTH", length = 7)
	public Timestamp getBirth() {
		return this.birth;
	}
	@Column(name = "SEX", precision = 1, scale = 0)
	public Boolean getSex() {
		return this.sex;
	}
}

注解可以完全使用在hibernate中

	反向映射会自动在persistence.xml中注册这个实体类
		<persistence-unit name="yan" transaction-type="RESOURCE_LOCAL">
			<provider>org.hibernate.ejb.HibernatePersistence</provider>
			<class>com.yan.entity.UserBean</class>  注册实体类
			<properties>	....


4、编程调用
	EntityManagerFactory factory=Persistence.createEntityManagerFactory("yan");   // SessionFactory
	EntityManager manager=factory.createEntityManager();  //Session
	manager.getTransaction().begin();
	manager.persist(user);
	manager.getTransaction().commit();
	manager.close();
	
				
			
